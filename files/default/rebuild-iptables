#!/usr/bin/env ruby

#
# rebuild-iptables.rb -- Construct an iptables rules file from fragments.
#
# Rewritten by Phil Cohen <github@phlippers.net>
# Copyright 2011-2012, Phil Cohen
# Originally Written by Russ Allbery <rra@stanford.edu>
# Adapted by Digant C Kasundra <digant@stanford.edu>
# Adapted by Joe Williams (2011) <joe@joetify.com>
# Copyright 2005, 2006 Board of Trustees, Leland Stanford Jr. University
#
# Constructs an iptables rules file from the prefix, standard, and suffix
# files in the iptables configuration area, adding any additional modules
# specified in the command line, and prints the resulting iptables rules to
# standard output (suitable for saving into /var/lib/iptables or some other
# appropriate location on the system).

##############################################################################
# Modules and declarations
##############################################################################

# Path to the iptables template area.
TEMPLATE_PATH = "/etc/iptables.d"

##############################################################################
# Installation
##############################################################################

# Return the prefix
def prefix
  File.read(File.join(TEMPLATE_PATH, "prefix")) rescue "*filter"
end

# Return the suffix
def suffix
  File.read(File.join(TEMPLATE_PATH, "suffix")) rescue "COMMIT"
end

def snat
  File.read("/etc/iptables.snat") rescue ""
end

# Read in a file, processing includes as required.
def read_iptables(file)
  data = []
  file = File.join(TEMPLATE_PATH, file) unless File.dirname(file) =~ /iptables\.d/
  rule = File.readlines(file).map{ |line| line.chomp }
  rule.each do |line|
    if line =~ /^\s*include\s+(\S+)$/
      data << read_iptables($1)
    else
      data << line
    end
  end
  data.join("\n")
end

# Write a file carefully.
def write_iptables(file, data)
  File.open("#{file}.new", "w") { |f| f.write(data) }
  File.rename("#{file}.new", file)
end

# Install iptables on a Red Hat system. Takes the new iptables data.
def install_redhat(data)
  write_iptables("/etc/sysconfig/iptables", data)
  system("/sbin/service", "iptables", "restart")
end

# Install iptables on a Debian system. Takes the new iptables data.
def install_debian(data)
  Dir.mkdir("/etc/iptables") unless File.directory?("/etc/iptables")
  write_iptables("/etc/iptables/general", data)
  system("/sbin/iptables-restore < /etc/iptables/general")
end

##############################################################################
# Main routine
##############################################################################

data = []
templates = Dir["#{TEMPLATE_PATH}/*"].sort.delete_if do |template|
  %w[prefix suffix].include?(File.basename(template))
end

data << prefix
templates.each { |template| data << read_iptables(template) }
data << suffix
data << snat

data = data.join("\n")

if File.exists?("/etc/debian_version")
  install_debian(data)
elsif File.exists?("/etc/redhat-release")
  install_redhat(data)
else
  raise "#{$0}: cannot figure out whether this is Red Hat or Debian\n";
end

exit 0
